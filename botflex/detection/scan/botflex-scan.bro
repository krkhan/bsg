##! This script analyzes inbound and outbound scanning activities.
##! Inbound scanning can be a very elementray sign of botnet infection. 
##! Outbound scan contributes to attack phase of botnet infection.
##! This script evokes events related to inbound and outbound scan.

@load botflex/utils/types
@load botflex/detection/scan/pre-scan

module BotflexScan;

export {
	## This script generates two logs, one for inbound and
	## another for outbound scannning
	redef enum Log::ID += { LOG_IB, LOG_OB };

	type Info_ib: record {
		ts:                time             &log;
		src_ip:            addr             &log;
		scan_type:         string	    &log;
		num_ports_scanned: count            &log;
		num_addrs_scanned: count            &log;
		target_port:	   port             &log;
		msg:		   string	    &log;
		victims:           string           &log;
		
	};

	type Info_ob: record {
		ts:                time             &log;
		src_ip:            addr             &log;
		scan_type:         string	    &log;
		num_ports_scanned: count            &log;
		num_addrs_scanned: count            &log;
		target_port:	   port             &log;
		msg:		   string	    &log;
		
	};
	
	redef record connection += {
	conn: Info_ib &optional;};

	redef record connection += {
	conn: Info_ob &optional;};

	## Event that can be handled to access the scan
	## record as it is sent on to the logging framework.
	global log_scan_ib: event(rec: Info_ib);
	global log_scan_ob: event(rec: Info_ob);

	## The event that sufficient evidence has been gathered to declare the inbound 
	## scan or attack (in case of outbound scan) phase of botnet infection lifecycle
	global scan_ib: event( ts: time, src_ip: addr, victim: addr, target_port: port, 
			       msg: string, tag: string, severity: string );
	global scan_ob: event( ts: time, src_ip: addr, target_port: port, 
			       msg: string, tag: string, severity: string );
	global say_hello: event(str: string);
	global log_scan: event( ts: time, src_ip: addr, scan_type: string, num_ports_scanned: count,
	       num_addrs_scanned: count, target_port: port, msg: string, victims: string, outbound: bool );
}

event bro_init() &priority=5
	{
	Log::create_stream(BotflexScan::LOG_IB, [$columns=Info_ib, $ev=log_scan_ib]);
	Log::create_stream(BotflexScan::LOG_OB, [$columns=Info_ob, $ev=log_scan_ob]);
	
	}
global scan_ib_info: BotflexScan::Info_ib;
global scan_ob_info: BotflexScan::Info_ob;

## Hooking into notices of interest generated by pre-scan.bro
redef Notice::policy += {
       [$pred(n: Notice::Info) = {
	       local outbound = F;  
	       local t = network_time();

               if ( n$note == Scan::PortScan )
                       {
			local msg1 = fmt("%s: %s: Severity: %s",strftime(str_time, t),n$msg,n$sub);

			outbound = Site::is_local_addr(n$src);
			if ( outbound )
				{
				event BotflexScan::scan_ob( t, n$src, n$p, msg1, "Port Scan", n$sub );
				event BotflexScan::log_scan(t, n$src, "Port Scan", n$n, 0, n$p, 
						              msg1, "", T );
				}
			else
				{
				event BotflexScan::scan_ib(t, n$src, n$dst, n$p, msg1, "Port Scan", n$sub );
				event BotflexScan::log_scan(t, n$src, "Port Scan", n$n, 0, n$p, 
						              msg1, fmt("%s", n$dst), F );
				}
                       }

               else if ( n$note == Scan::AddressScanOutbound )
                       {print "ob"; print n$src;
			local msg2 = fmt("%s: %s: Severity: %s",strftime(str_time, t),n$msg,n$sub);
			#print fmt("t: %s", t);print fmt("n$src: %s", n$src);print fmt("n$p: %s", n$p);print fmt("msg2: %s", msg2);
			#print fmt("n$sub: %s", n$sub);
			event BotflexScan::scan_ob( t, n$src, n$p, msg2, "Address Scan", n$sub  ); 
			event BotflexScan::log_scan(t, n$src, "Address Scan", 0, n$n, n$p, 
						      msg2, "", T );	
                       }

		else if ( n$note == Scan::AddressScanInbound )
                       {print "ib";print n$src;
			# n$msg has the form <the msg>:<victim1 victim2 victim3..>
			local msg_arr = split(n$msg, /[:]/);
			local str_victims = split( msg_arr[2], /[[:blank:]]*/ );

			for ( v in str_victims )
				{
				local msg3 = fmt("%s: %s was scanned by %s (%s): Severity: %s",strftime(str_time, t),v,n$src,n$p,n$sub);
				event BotflexScan::scan_ib(t, n$src, to_addr(str_victims[v]), n$p, msg3, "Address Scan", n$sub );
				}
			event BotflexScan::log_scan(t, n$src, "Address Scan", n$n, 0, n$p, 
						      fmt("%s: %s",msg_arr[1], n$sub), msg_arr[2], F );

                       }

	       else if ( n$note == Scan::LowPortTrolling )
                       {
			local msg4 = fmt("%s: %s: Severity: %s",strftime(str_time, t),n$msg,n$sub);
			outbound = Site::is_local_addr(n$src);
			if ( outbound )
				{
				event BotflexScan::scan_ob( t, n$src, n$p, msg4, "Port Scan", n$sub );
				event BotflexScan::log_scan(t, n$src, "Port Scan", n$n, 0, n$p, 
						      msg4, "", T );
				}
			else
				{
				event BotflexScan::scan_ib( t, n$src, n$dst, n$p, msg4, "Port Scan", n$sub );
				event BotflexScan::log_scan(t, n$src, "Port Scan", n$n, 0, n$p, 
						      msg4, fmt("%s", n$dst), F );
				}
                       }
	
       }]
};

event say_hello( str: string)
	{
	print fmt("Hello %s",str);
	}


# Logging scan information. The last parameter <outbound> specifies which
# log the information will be written to
event log_scan( ts: time, src_ip: addr, scan_type: string, num_ports_scanned: count,
	       num_addrs_scanned: count, target_port: port, msg: string, victims: string, outbound: bool )
	{
	if ( outbound )
		{
		scan_ob_info$ts = ts;
		scan_ob_info$src_ip = src_ip;
		scan_ob_info$scan_type = scan_type;
		scan_ob_info$num_ports_scanned = num_ports_scanned;
		scan_ob_info$num_addrs_scanned = num_addrs_scanned;
		#scan_ob_info$target_port = target_port;
		scan_ob_info$msg = msg;

		Log::write(BotflexScan::LOG_OB, BotflexScan::scan_ob_info );
		}
	else
		{
		scan_ib_info$ts = ts;
		scan_ib_info$src_ip = src_ip;
		scan_ib_info$scan_type = scan_type;
		scan_ib_info$num_ports_scanned = num_ports_scanned;
		scan_ib_info$num_addrs_scanned = num_addrs_scanned;
		scan_ib_info$target_port = target_port;
		scan_ib_info$msg = msg;
		scan_ib_info$victims = victims;

		Log::write(BotflexScan::LOG_IB, BotflexScan::scan_ib_info );
		}
	}


